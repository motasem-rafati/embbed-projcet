;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/21/2023 12:48:09 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2923      	GOTO       291
_Interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00B4      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00B5      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A1      	MOVWF      33
0x000D	0x0871      	MOVF       R1, 0
0x000E	0x00A0      	MOVWF      32
;MyProject.c,19 :: 		void Interrupt(void)
;MyProject.c,23 :: 		if(INTCON & 0x02)
0x000F	0x1C8B      	BTFSS      INTCON, 1
0x0010	0x2849      	GOTO       L_Interrupt0
;MyProject.c,25 :: 		if(EIEdge == 0)   // True when a raising edge triggers RB0
0x0011	0x082F      	MOVF       _EIEdge, 0
0x0012	0x3A00      	XORLW      0
0x0013	0x1D03      	BTFSS      STATUS, 2
0x0014	0x281F      	GOTO       L_Interrupt1
;MyProject.c,28 :: 		TMR0 = 6;                       // Load 6 in timer0, so it will over-flow after 250 counts
0x0015	0x3006      	MOVLW      6
0x0016	0x0081      	MOVWF      TMR0
;MyProject.c,30 :: 		CounterRF = 0;            // initializing with zero
0x0017	0x01A9      	CLRF       _CounterRF
0x0018	0x01AA      	CLRF       _CounterRF+1
;MyProject.c,31 :: 		OPTION_REG = OPTION_REG & 0xBF; // Interrupt edge select bit = 0
0x0019	0x30BF      	MOVLW      191
0x001A	0x1683      	BSF        STATUS, 5
0x001B	0x0581      	ANDWF      OPTION_REG, 1
;MyProject.c,33 :: 		EIEdge++;        // increase the counter by one to get into "else" at the next incoming falling edge
0x001C	0x1283      	BCF        STATUS, 5
0x001D	0x0AAF      	INCF       _EIEdge, 1
;MyProject.c,34 :: 		}
0x001E	0x2847      	GOTO       L_Interrupt2
L_Interrupt1:
;MyProject.c,40 :: 		Period = (CounterRF * 250) + (TMR0 - 6); // Overall Period = Over-flow Counts * 250uS + (Timer0 value in uS - 6us)
0x001F	0x0829      	MOVF       _CounterRF, 0
0x0020	0x00F0      	MOVWF      R0
0x0021	0x082A      	MOVF       _CounterRF+1, 0
0x0022	0x00F1      	MOVWF      R0+1
0x0023	0x30FA      	MOVLW      250
0x0024	0x00F4      	MOVWF      R4
0x0025	0x01F5      	CLRF       R4+1
0x0026	0x20F8      	CALL       _Mul_16X16_U
0x0027	0x3006      	MOVLW      6
0x0028	0x0201      	SUBWF      TMR0, 0
0x0029	0x00F2      	MOVWF      R2
0x002A	0x01F3      	CLRF       R2+1
0x002B	0x1C03      	BTFSS      STATUS, 0
0x002C	0x03F3      	DECF       R2+1, 1
0x002D	0x0872      	MOVF       R2, 0
0x002E	0x07F0      	ADDWF      R0, 1
0x002F	0x0873      	MOVF       R2+1, 0
0x0030	0x1803      	BTFSC      STATUS, 0
0x0031	0x3E01      	ADDLW      1
0x0032	0x07F1      	ADDWF      R0+1, 1
0x0033	0x0870      	MOVF       R0, 0
0x0034	0x00AB      	MOVWF      _Period
0x0035	0x0871      	MOVF       R0+1, 0
0x0036	0x00AC      	MOVWF      _Period+1
;MyProject.c,42 :: 		Distance = (17 * Period)/1000;  // Distance = (The speed of sound) * (Period in uS)
0x0037	0x3011      	MOVLW      17
0x0038	0x00F4      	MOVWF      R4
0x0039	0x3000      	MOVLW      0
0x003A	0x00F5      	MOVWF      R4+1
0x003B	0x20F8      	CALL       _Mul_16X16_U
0x003C	0x30E8      	MOVLW      232
0x003D	0x00F4      	MOVWF      R4
0x003E	0x3003      	MOVLW      3
0x003F	0x00F5      	MOVWF      R4+1
0x0040	0x20DB      	CALL       _Div_16X16_U
0x0041	0x0870      	MOVF       R0, 0
0x0042	0x00A5      	MOVWF      _Distance
;MyProject.c,47 :: 		OPTION_REG = OPTION_REG | 0x40; // Interrupt edge select bit = 1
0x0043	0x1683      	BSF        STATUS, 5
0x0044	0x1701      	BSF        OPTION_REG, 6
;MyProject.c,49 :: 		EIEdge = 0;                    // next incoming raising edge
0x0045	0x1283      	BCF        STATUS, 5
0x0046	0x01AF      	CLRF       _EIEdge
;MyProject.c,50 :: 		}
L_Interrupt2:
;MyProject.c,51 :: 		INTCON = INTCON & 0xFD;          // Clear INTF
0x0047	0x30FD      	MOVLW      253
0x0048	0x058B      	ANDWF      INTCON, 1
;MyProject.c,52 :: 		}
L_Interrupt0:
;MyProject.c,55 :: 		if(INTCON & 0x04)
0x0049	0x1D0B      	BTFSS      INTCON, 2
0x004A	0x2864      	GOTO       L_Interrupt3
;MyProject.c,57 :: 		TMR0 = 6;                        // Load 6 in timer0, so it will over-flow after 250 counts
0x004B	0x3006      	MOVLW      6
0x004C	0x0081      	MOVWF      TMR0
;MyProject.c,58 :: 		if(count==10000){   //  10000*250us=2.5S
0x004D	0x0823      	MOVF       _count+1, 0
0x004E	0x3A27      	XORLW      39
0x004F	0x1D03      	BTFSS      STATUS, 2
0x0050	0x2853      	GOTO       L__Interrupt25
0x0051	0x3010      	MOVLW      16
0x0052	0x0622      	XORWF      _count, 0
L__Interrupt25:
0x0053	0x1D03      	BTFSS      STATUS, 2
0x0054	0x2859      	GOTO       L_Interrupt4
;MyProject.c,59 :: 		pump=1;             // ready to pump
0x0055	0x3001      	MOVLW      1
0x0056	0x00A8      	MOVWF      _pump
;MyProject.c,60 :: 		count=0;
0x0057	0x01A2      	CLRF       _count
0x0058	0x01A3      	CLRF       _count+1
;MyProject.c,61 :: 		}
L_Interrupt4:
;MyProject.c,64 :: 		CounterRF++;               // Increase the over-flow counts by one
0x0059	0x0AA9      	INCF       _CounterRF, 1
0x005A	0x1903      	BTFSC      STATUS, 2
0x005B	0x0AAA      	INCF       _CounterRF+1, 1
;MyProject.c,65 :: 		Delay_Counter++;           // Increase the delay counts by one
0x005C	0x0AAD      	INCF       _Delay_Counter, 1
0x005D	0x1903      	BTFSC      STATUS, 2
0x005E	0x0AAE      	INCF       _Delay_Counter+1, 1
;MyProject.c,66 :: 		INTCON = INTCON & 0xFB;    // Clear T0IF
0x005F	0x30FB      	MOVLW      251
0x0060	0x058B      	ANDWF      INTCON, 1
;MyProject.c,67 :: 		count++;               // incress every 250us
0x0061	0x0AA2      	INCF       _count, 1
0x0062	0x1903      	BTFSC      STATUS, 2
0x0063	0x0AA3      	INCF       _count+1, 1
;MyProject.c,69 :: 		}
L_Interrupt3:
;MyProject.c,70 :: 		if(PIR1&0x04){//CCP1 interrupt
0x0064	0x1D0C      	BTFSS      PIR1, 2
0x0065	0x288D      	GOTO       L_Interrupt5
;MyProject.c,71 :: 		if(HL){ //high
0x0066	0x0824      	MOVF       _HL, 0
0x0067	0x1903      	BTFSC      STATUS, 2
0x0068	0x2876      	GOTO       L_Interrupt6
;MyProject.c,72 :: 		CCPR1H= angle >>8;
0x0069	0x0833      	MOVF       _angle+1, 0
0x006A	0x00F0      	MOVWF      R0
0x006B	0x01F1      	CLRF       R0+1
0x006C	0x0870      	MOVF       R0, 0
0x006D	0x0096      	MOVWF      CCPR1H
;MyProject.c,73 :: 		CCPR1L= angle;
0x006E	0x0832      	MOVF       _angle, 0
0x006F	0x0095      	MOVWF      CCPR1L
;MyProject.c,74 :: 		HL=0;//next time low
0x0070	0x01A4      	CLRF       _HL
;MyProject.c,75 :: 		CCP1CON=0x09;//next time Falling edge
0x0071	0x3009      	MOVLW      9
0x0072	0x0097      	MOVWF      CCP1CON
;MyProject.c,76 :: 		TMR1H=0;
0x0073	0x018F      	CLRF       TMR1H
;MyProject.c,77 :: 		TMR1L=0;
0x0074	0x018E      	CLRF       TMR1L
;MyProject.c,78 :: 		}
0x0075	0x288B      	GOTO       L_Interrupt7
L_Interrupt6:
;MyProject.c,80 :: 		CCPR1H= (40000 - angle) >>8;
0x0076	0x0832      	MOVF       _angle, 0
0x0077	0x3C40      	SUBLW      64
0x0078	0x00F3      	MOVWF      R3
0x0079	0x0833      	MOVF       _angle+1, 0
0x007A	0x1C03      	BTFSS      STATUS, 0
0x007B	0x3E01      	ADDLW      1
0x007C	0x3C9C      	SUBLW      156
0x007D	0x00F4      	MOVWF      R3+1
0x007E	0x0874      	MOVF       R3+1, 0
0x007F	0x00F0      	MOVWF      R0
0x0080	0x01F1      	CLRF       R0+1
0x0081	0x0870      	MOVF       R0, 0
0x0082	0x0096      	MOVWF      CCPR1H
;MyProject.c,81 :: 		CCPR1L= (40000 - angle);
0x0083	0x0873      	MOVF       R3, 0
0x0084	0x0095      	MOVWF      CCPR1L
;MyProject.c,82 :: 		CCP1CON=0x08; //next time rising edge
0x0085	0x3008      	MOVLW      8
0x0086	0x0097      	MOVWF      CCP1CON
;MyProject.c,83 :: 		HL=1; //next time High
0x0087	0x3001      	MOVLW      1
0x0088	0x00A4      	MOVWF      _HL
;MyProject.c,84 :: 		TMR1H=0;
0x0089	0x018F      	CLRF       TMR1H
;MyProject.c,85 :: 		TMR1L=0;
0x008A	0x018E      	CLRF       TMR1L
;MyProject.c,87 :: 		}
L_Interrupt7:
;MyProject.c,89 :: 		PIR1=PIR1&0xFB;
0x008B	0x30FB      	MOVLW      251
0x008C	0x058C      	ANDWF      PIR1, 1
;MyProject.c,90 :: 		}
L_Interrupt5:
;MyProject.c,93 :: 		}
L_end_Interrupt:
L__Interrupt24:
0x008D	0x0821      	MOVF       33, 0
0x008E	0x00F0      	MOVWF      R0
0x008F	0x0820      	MOVF       32, 0
0x0090	0x00F1      	MOVWF      R1
0x0091	0x0835      	MOVF       ___savePCLATH, 0
0x0092	0x008A      	MOVWF      PCLATH
0x0093	0x0E34      	SWAPF      ___saveSTATUS, 0
0x0094	0x0083      	MOVWF      STATUS
0x0095	0x0EFF      	SWAPF      R15, 1
0x0096	0x0E7F      	SWAPF      R15, 0
0x0097	0x0009      	RETFIE
; end of _Interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0098	0x1283      	BCF        STATUS, 5
0x0099	0x1303      	BCF        STATUS, 6
0x009A	0x0831      	MOVF       ___DoICPAddr+1, 0
0x009B	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x009C	0x0830      	MOVF       ___DoICPAddr, 0
0x009D	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x009E	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x009F	0x2098      	CALL       _____DoICP
0x00A0	0x118A      	BCF        PCLATH, 3
0x00A1	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x00A2	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x00A3	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x00A4	0x0AB0      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x00A5	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x00A6	0x0AB1      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x00A7	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x00A8	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x00A9	0x289F      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x00AA	0x0008      	RETURN
; end of ___CC2DW
_Delayms:
;MyProject.c,172 :: 		void Delayms(unsigned int Time) // A delay function that receives its time in milli-seconds
;MyProject.c,174 :: 		TMR0 = 6;                            // Load 6 in timer0, so it will over-flow after 250 counts
0x00AB	0x3006      	MOVLW      6
0x00AC	0x1283      	BCF        STATUS, 5
0x00AD	0x1303      	BCF        STATUS, 6
0x00AE	0x0081      	MOVWF      TMR0
;MyProject.c,177 :: 		Delay_Counter = 0;                   // Start counting from zero
0x00AF	0x01AD      	CLRF       _Delay_Counter
0x00B0	0x01AE      	CLRF       _Delay_Counter+1
;MyProject.c,178 :: 		Time = Time * 4;                     // 1mS = 4 * 250uS
0x00B1	0x0DB6      	RLF        FARG_Delayms_Time, 1
0x00B2	0x0DB7      	RLF        FARG_Delayms_Time+1, 1
0x00B3	0x1036      	BCF        FARG_Delayms_Time, 0
0x00B4	0x0DB6      	RLF        FARG_Delayms_Time, 1
0x00B5	0x0DB7      	RLF        FARG_Delayms_Time+1, 1
0x00B6	0x1036      	BCF        FARG_Delayms_Time, 0
;MyProject.c,180 :: 		while (Delay_Counter < Time);       // Stuck here for "Time" in mS
L_Delayms18:
0x00B7	0x0837      	MOVF       FARG_Delayms_Time+1, 0
0x00B8	0x022E      	SUBWF      _Delay_Counter+1, 0
0x00B9	0x1D03      	BTFSS      STATUS, 2
0x00BA	0x28BD      	GOTO       L__Delayms30
0x00BB	0x0836      	MOVF       FARG_Delayms_Time, 0
0x00BC	0x022D      	SUBWF      _Delay_Counter, 0
L__Delayms30:
0x00BD	0x1803      	BTFSC      STATUS, 0
0x00BE	0x28C0      	GOTO       L_Delayms19
0x00BF	0x28B7      	GOTO       L_Delayms18
L_Delayms19:
;MyProject.c,181 :: 		}
L_end_Delayms:
0x00C0	0x0008      	RETURN
; end of _Delayms
_CCPPWM_init:
;MyProject.c,165 :: 		void CCPPWM_init(void){ //Configure CCP2 for motor 2  RC1
;MyProject.c,166 :: 		T2CON = 0x27;//enable Timer2 at Fosc/4 with 1:16 prescaler (8 uS percount 2000uS to count 250 counts)
0x00C1	0x3027      	MOVLW      39
0x00C2	0x1283      	BCF        STATUS, 5
0x00C3	0x1303      	BCF        STATUS, 6
0x00C4	0x0092      	MOVWF      T2CON
;MyProject.c,167 :: 		CCP2CON = 0x0C;//enable PWM for CCP2
0x00C5	0x300C      	MOVLW      12
0x00C6	0x009D      	MOVWF      CCP2CON
;MyProject.c,168 :: 		PR2 = 250;     // 250 counts =8uS *250 =2ms period
0x00C7	0x30FA      	MOVLW      250
0x00C8	0x1683      	BSF        STATUS, 5
0x00C9	0x0092      	MOVWF      PR2
;MyProject.c,169 :: 		CCPR2L=150  ; //60% duty cycle
0x00CA	0x3096      	MOVLW      150
0x00CB	0x1283      	BCF        STATUS, 5
0x00CC	0x009B      	MOVWF      CCPR2L
;MyProject.c,170 :: 		}
L_end_CCPPWM_init:
0x00CD	0x0008      	RETURN
; end of _CCPPWM_init
_CalculateDistance:
;MyProject.c,183 :: 		void CalculateDistance(void)
;MyProject.c,186 :: 		PORTC = PORTC | 0x01;                        // RC0 = 1
0x00CE	0x1283      	BCF        STATUS, 5
0x00CF	0x1303      	BCF        STATUS, 6
0x00D0	0x1407      	BSF        PORTC, 0
;MyProject.c,187 :: 		for(i=0 ;i<22 ;i++);                          //ultrasonic TRIG need 10us delay 22*0.5us=11us
0x00D1	0x01F1      	CLRF       R1
L_CalculateDistance20:
0x00D2	0x3016      	MOVLW      22
0x00D3	0x0271      	SUBWF      R1, 0
0x00D4	0x1803      	BTFSC      STATUS, 0
0x00D5	0x28D8      	GOTO       L_CalculateDistance21
0x00D6	0x0AF1      	INCF       R1, 1
0x00D7	0x28D2      	GOTO       L_CalculateDistance20
L_CalculateDistance21:
;MyProject.c,188 :: 		PORTC = PORTC & 0xFE;                        // RC0 = 0
0x00D8	0x30FE      	MOVLW      254
0x00D9	0x0587      	ANDWF      PORTC, 1
;MyProject.c,189 :: 		}
L_end_CalculateDistance:
0x00DA	0x0008      	RETURN
; end of _CalculateDistance
_Div_16X16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x00DB	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x00DC	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x00DD	0x01F8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x00DE	0x01F9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x00DF	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x00E0	0x00FC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x00E1	0x0D71      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x00E2	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x00E3	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x00E4	0x0874      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x00E5	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x00E6	0x0875      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x00E7	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x00E8	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x00E9	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x00EA	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x00EB	0x28F3      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x00EC	0x0874      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x00ED	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x00EE	0x0875      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x00EF	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x00F0	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x00F1	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x00F2	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x00F3	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x00F4	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x00F5	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x00F6	0x28E1      	GOTO       $-21
;__Lib_Math.c,251 :: 		
L_end_Div_16X16_U:
0x00F7	0x0008      	RETURN
; end of _Div_16X16_U
_Mul_16X16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x00F8	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,144 :: 		
0x00F9	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,145 :: 		
0x00FA	0x01FB      	CLRF       R11
;__Lib_Math.c,146 :: 		
0x00FB	0x01FA      	CLRF       R10
;__Lib_Math.c,147 :: 		
0x00FC	0x01F9      	CLRF       R9
;__Lib_Math.c,148 :: 		
0x00FD	0x3080      	MOVLW      128
;__Lib_Math.c,149 :: 		
0x00FE	0x00F8      	MOVWF      R8
;__Lib_Math.c,150 :: 		
0x00FF	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,151 :: 		
0x0100	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,152 :: 		
0x0101	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,153 :: 		
0x0102	0x290C      	GOTO       $+10
;__Lib_Math.c,154 :: 		
0x0103	0x0874      	MOVF       R4, 0
;__Lib_Math.c,155 :: 		
0x0104	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,156 :: 		
0x0105	0x0875      	MOVF       R5, 0
;__Lib_Math.c,157 :: 		
0x0106	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,158 :: 		
0x0107	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,159 :: 		
0x0108	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,160 :: 		
0x0109	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,161 :: 		
0x010A	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,162 :: 		
0x010B	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,163 :: 		
0x010C	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,164 :: 		
0x010D	0x2914      	GOTO       $+7
;__Lib_Math.c,165 :: 		
0x010E	0x0874      	MOVF       R4, 0
;__Lib_Math.c,166 :: 		
0x010F	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,167 :: 		
0x0110	0x0875      	MOVF       R5, 0
;__Lib_Math.c,168 :: 		
0x0111	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,169 :: 		
0x0112	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,170 :: 		
0x0113	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,171 :: 		
0x0114	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,172 :: 		
0x0115	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,173 :: 		
0x0116	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,174 :: 		
0x0117	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,175 :: 		
0x0118	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,176 :: 		
0x0119	0x28FF      	GOTO       $-26
;__Lib_Math.c,177 :: 		
0x011A	0x087B      	MOVF       R11, 0
;__Lib_Math.c,178 :: 		
0x011B	0x00F3      	MOVWF      R3
;__Lib_Math.c,179 :: 		
0x011C	0x087A      	MOVF       R10, 0
;__Lib_Math.c,180 :: 		
0x011D	0x00F2      	MOVWF      R2
;__Lib_Math.c,181 :: 		
0x011E	0x0879      	MOVF       R9, 0
;__Lib_Math.c,182 :: 		
0x011F	0x00F1      	MOVWF      R1
;__Lib_Math.c,183 :: 		
0x0120	0x0878      	MOVF       R8, 0
;__Lib_Math.c,184 :: 		
0x0121	0x00F0      	MOVWF      R0
;__Lib_Math.c,187 :: 		
L_end_Mul_16X16_U:
0x0122	0x0008      	RETURN
; end of _Mul_16X16_U
_main:
0x0123	0x1283      	BCF        STATUS, 5
0x0124	0x1303      	BCF        STATUS, 6
0x0125	0x01A2      	CLRF       _count
0x0126	0x01A3      	CLRF       35
0x0127	0x01A4      	CLRF       _HL
0x0128	0x3064      	MOVLW      100
0x0129	0x00A5      	MOVWF      _Distance
0x012A	0x01A6      	CLRF       _count2
0x012B	0x01A7      	CLRF       39
0x012C	0x01A8      	CLRF       _pump
0x012D	0x01A9      	CLRF       _CounterRF
0x012E	0x01AA      	CLRF       42
0x012F	0x01AB      	CLRF       _Period
0x0130	0x01AC      	CLRF       44
0x0131	0x01AD      	CLRF       _Delay_Counter
0x0132	0x01AE      	CLRF       46
0x0133	0x01AF      	CLRF       _EIEdge
;MyProject.c,96 :: 		void main()
;MyProject.c,98 :: 		TRISB = 0xFF;                     // PORTB as an input
0x0134	0x30FF      	MOVLW      255
0x0135	0x1683      	BSF        STATUS, 5
0x0136	0x0086      	MOVWF      TRISB
;MyProject.c,99 :: 		TRISC = 0x00;                     // PORTC as an output
0x0137	0x0187      	CLRF       TRISC
;MyProject.c,100 :: 		PORTC = 0x00;                     // PORTC as LOW
0x0138	0x1283      	BCF        STATUS, 5
0x0139	0x0187      	CLRF       PORTC
;MyProject.c,101 :: 		TRISD = 0x00;                     // PORTD as an output
0x013A	0x1683      	BSF        STATUS, 5
0x013B	0x0188      	CLRF       TRISD
;MyProject.c,102 :: 		PORTD = 0x00;                     // PORTD as LOW
0x013C	0x1283      	BCF        STATUS, 5
0x013D	0x0188      	CLRF       PORTD
;MyProject.c,105 :: 		T1CON=0x01;//TMR1 On Fosc/4 (inc 0.5uS) with 0 prescaler (TMR1 overflow after 0xFFFF counts ==65535)==> 32.767ms
0x013E	0x3001      	MOVLW      1
0x013F	0x0090      	MOVWF      T1CON
;MyProject.c,106 :: 		INTCON = 0xF0;                    // GIE, T0IE,T1IE,INTE, and RBIE are enabled
0x0140	0x30F0      	MOVLW      240
0x0141	0x008B      	MOVWF      INTCON
;MyProject.c,107 :: 		OPTION_REG = 0x40;                // Interrupt edge select bit = 1
0x0142	0x3040      	MOVLW      64
0x0143	0x1683      	BSF        STATUS, 5
0x0144	0x0081      	MOVWF      OPTION_REG
;MyProject.c,110 :: 		PIE1=PIE1|0x04;// Enable CCP1 interrupts
0x0145	0x150C      	BSF        PIE1, 2
;MyProject.c,111 :: 		TMR1H=0;
0x0146	0x1283      	BCF        STATUS, 5
0x0147	0x018F      	CLRF       TMR1H
;MyProject.c,112 :: 		TMR1L=0;
0x0148	0x018E      	CLRF       TMR1L
;MyProject.c,113 :: 		CCPR1H=2000>>8;
0x0149	0x3007      	MOVLW      7
0x014A	0x0096      	MOVWF      CCPR1H
;MyProject.c,114 :: 		CCPR1L=2000;
0x014B	0x30D0      	MOVLW      208
0x014C	0x0095      	MOVWF      CCPR1L
;MyProject.c,115 :: 		angle=1100; //600us initially == 1000*0.5=500
0x014D	0x304C      	MOVLW      76
0x014E	0x00B2      	MOVWF      _angle
0x014F	0x3004      	MOVLW      4
0x0150	0x00B3      	MOVWF      _angle+1
;MyProject.c,116 :: 		CCPPWM_init(void);
0x0151	0x20C1      	CALL       _CCPPWM_init
;MyProject.c,117 :: 		while(1)
L_main8:
;MyProject.c,119 :: 		CalculateDistance();
0x0152	0x20CE      	CALL       _CalculateDistance
;MyProject.c,120 :: 		angle=1200;
0x0153	0x30B0      	MOVLW      176
0x0154	0x00B2      	MOVWF      _angle
0x0155	0x3004      	MOVLW      4
0x0156	0x00B3      	MOVWF      _angle+1
;MyProject.c,124 :: 		if(Distance < 10 )
0x0157	0x300A      	MOVLW      10
0x0158	0x0225      	SUBWF      _Distance, 0
0x0159	0x1803      	BTFSC      STATUS, 0
0x015A	0x2971      	GOTO       L_main10
;MyProject.c,126 :: 		PORTD = 0x00;     //stop everythings
0x015B	0x0188      	CLRF       PORTD
;MyProject.c,127 :: 		CCPR2L=0;
0x015C	0x019B      	CLRF       CCPR2L
;MyProject.c,128 :: 		Delayms(500);
0x015D	0x30F4      	MOVLW      244
0x015E	0x00B6      	MOVWF      FARG_Delayms_Time
0x015F	0x3001      	MOVLW      1
0x0160	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x0161	0x20AB      	CALL       _Delayms
;MyProject.c,129 :: 		PORTD = 0x50;          //RD3 SPEED OFF RD4 led on RD 5 OFF RD6 BACKWARD
0x0162	0x3050      	MOVLW      80
0x0163	0x0088      	MOVWF      PORTD
;MyProject.c,130 :: 		Delayms(1);
0x0164	0x3001      	MOVLW      1
0x0165	0x00B6      	MOVWF      FARG_Delayms_Time
0x0166	0x3000      	MOVLW      0
0x0167	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x0168	0x20AB      	CALL       _Delayms
;MyProject.c,131 :: 		CCPR2L=150;
0x0169	0x3096      	MOVLW      150
0x016A	0x009B      	MOVWF      CCPR2L
;MyProject.c,132 :: 		Delayms(1000);   //  time to go back
0x016B	0x30E8      	MOVLW      232
0x016C	0x00B6      	MOVWF      FARG_Delayms_Time
0x016D	0x3003      	MOVLW      3
0x016E	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x016F	0x20AB      	CALL       _Delayms
;MyProject.c,134 :: 		}
0x0170	0x29B0      	GOTO       L_main11
L_main10:
;MyProject.c,137 :: 		PORTD = 0x30;       // RD3 speed off, RD4 leds ,RD5 forward RD6 off ,RD7 PUMP OFF
0x0171	0x3030      	MOVLW      48
0x0172	0x0088      	MOVWF      PORTD
;MyProject.c,138 :: 		Delayms(1);
0x0173	0x3001      	MOVLW      1
0x0174	0x00B6      	MOVWF      FARG_Delayms_Time
0x0175	0x3000      	MOVLW      0
0x0176	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x0177	0x20AB      	CALL       _Delayms
;MyProject.c,139 :: 		PORTD = 0x38;     // RD3 speed ON,RD4 leds RD5 forward RD6 off ,RD7 PUMP OFF
0x0178	0x3038      	MOVLW      56
0x0179	0x0088      	MOVWF      PORTD
;MyProject.c,140 :: 		Delayms(1);
0x017A	0x3001      	MOVLW      1
0x017B	0x00B6      	MOVWF      FARG_Delayms_Time
0x017C	0x3000      	MOVLW      0
0x017D	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x017E	0x20AB      	CALL       _Delayms
;MyProject.c,141 :: 		if(pump){        //will pump water every 2.5sec
0x017F	0x0828      	MOVF       _pump, 0
0x0180	0x1903      	BTFSC      STATUS, 2
0x0181	0x29AC      	GOTO       L_main12
;MyProject.c,142 :: 		for( count2=0 ;count2 < 1000 ; count2++){
0x0182	0x01A6      	CLRF       _count2
0x0183	0x01A7      	CLRF       _count2+1
L_main13:
0x0184	0x3003      	MOVLW      3
0x0185	0x0227      	SUBWF      _count2+1, 0
0x0186	0x1D03      	BTFSS      STATUS, 2
0x0187	0x298A      	GOTO       L__main27
0x0188	0x30E8      	MOVLW      232
0x0189	0x0226      	SUBWF      _count2, 0
L__main27:
0x018A	0x1803      	BTFSC      STATUS, 0
0x018B	0x29AB      	GOTO       L_main14
;MyProject.c,143 :: 		CalculateDistance();
0x018C	0x20CE      	CALL       _CalculateDistance
;MyProject.c,144 :: 		if(Distance < 10 ) {
0x018D	0x300A      	MOVLW      10
0x018E	0x0225      	SUBWF      _Distance, 0
0x018F	0x1803      	BTFSC      STATUS, 0
0x0190	0x2999      	GOTO       L_main16
;MyProject.c,145 :: 		PORTD = 0x50;          //RD3 SPEED OFF RD4 led on RD 5 OFF RD6 BACKWARD
0x0191	0x3050      	MOVLW      80
0x0192	0x0088      	MOVWF      PORTD
;MyProject.c,146 :: 		Delayms(1000);   //  time to go back
0x0193	0x30E8      	MOVLW      232
0x0194	0x00B6      	MOVWF      FARG_Delayms_Time
0x0195	0x3003      	MOVLW      3
0x0196	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x0197	0x20AB      	CALL       _Delayms
;MyProject.c,147 :: 		}
0x0198	0x29A7      	GOTO       L_main17
L_main16:
;MyProject.c,149 :: 		PORTD=0xB8;// PUMP RD7 ON RD56 FORWARD RD3 ON
0x0199	0x30B8      	MOVLW      184
0x019A	0x0088      	MOVWF      PORTD
;MyProject.c,150 :: 		Delayms(1);
0x019B	0x3001      	MOVLW      1
0x019C	0x00B6      	MOVWF      FARG_Delayms_Time
0x019D	0x3000      	MOVLW      0
0x019E	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x019F	0x20AB      	CALL       _Delayms
;MyProject.c,151 :: 		PORTD=0xB0;  //PUMP RD7 ON RD56 FORWARD RD3 OFF
0x01A0	0x30B0      	MOVLW      176
0x01A1	0x0088      	MOVWF      PORTD
;MyProject.c,152 :: 		Delayms(1);
0x01A2	0x3001      	MOVLW      1
0x01A3	0x00B6      	MOVWF      FARG_Delayms_Time
0x01A4	0x3000      	MOVLW      0
0x01A5	0x00B7      	MOVWF      FARG_Delayms_Time+1
0x01A6	0x20AB      	CALL       _Delayms
;MyProject.c,153 :: 		}
L_main17:
;MyProject.c,142 :: 		for( count2=0 ;count2 < 1000 ; count2++){
0x01A7	0x0AA6      	INCF       _count2, 1
0x01A8	0x1903      	BTFSC      STATUS, 2
0x01A9	0x0AA7      	INCF       _count2+1, 1
;MyProject.c,154 :: 		}
0x01AA	0x2984      	GOTO       L_main13
L_main14:
;MyProject.c,155 :: 		pump=0;   //rest to 0 to wait 2.5S
0x01AB	0x01A8      	CLRF       _pump
;MyProject.c,156 :: 		}
L_main12:
;MyProject.c,158 :: 		angle=3500;
0x01AC	0x30AC      	MOVLW      172
0x01AD	0x00B2      	MOVWF      _angle
0x01AE	0x300D      	MOVLW      13
0x01AF	0x00B3      	MOVWF      _angle+1
;MyProject.c,160 :: 		}
L_main11:
;MyProject.c,161 :: 		}
0x01B0	0x2952      	GOTO       L_main8
;MyProject.c,163 :: 		}
L_end_main:
0x01B1	0x29B1      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [148]    _Interrupt
0x0098       [7]    _____DoICP
0x009F      [12]    ___CC2DW
0x00AB      [22]    _Delayms
0x00C1      [13]    _CCPPWM_init
0x00CE      [13]    _CalculateDistance
0x00DB      [29]    _Div_16X16_U
0x00F8      [43]    _Mul_16X16_U
0x0123     [143]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [1]    T1CON
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0016       [1]    CCPR1H
0x0017       [1]    CCP1CON
0x001B       [1]    CCPR2L
0x001D       [1]    CCP2CON
0x0022       [2]    _count
0x0024       [1]    _HL
0x0025       [1]    _Distance
0x0026       [2]    _count2
0x0028       [1]    _pump
0x0029       [2]    _CounterRF
0x002B       [2]    _Period
0x002D       [2]    _Delay_Counter
0x002F       [1]    _EIEdge
0x0030       [2]    ___DoICPAddr
0x0032       [2]    _angle
0x0034       [1]    ___saveSTATUS
0x0035       [1]    ___savePCLATH
0x0036       [2]    FARG_Delayms_Time
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x008C       [1]    PIE1
0x0092       [1]    PR2
